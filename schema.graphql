type Duration {
  start: String
  end: String
  time_elapsed: Float
  remaining_time: String
}

# Types for Program Performance Analytics
type ProgramModule {
  module_id: String
  module_name: String
  cohort_schedule_id: String
  start_date: String
  end_date: String
  module_total_points: Int
  issue_badges: Boolean
  badge_percentage: Float
  allowed_quiz_attempts: Int
  sla_ita_attendance_points: Int
  badge_bonus_points: Int
}

type ProgramCourse {
  course_id: String
  course_name: String
  start_date: String
  end_date: String
  course_total_points: Int
  issue_badges: Boolean
  badge_percentage: Float
  allowed_quiz_attempts: Int
  badge_bonus_points: Int
  sla_ita_attendance_points: Int
  cohort_schedule_id: String
  certificate_pass_percentage: Float
  modules: [ProgramModule!]
}

# Types for Learner Progress
type LearnerModule {
  id: String
  name: String
  engagement: Float
  progress: Float
  performance: Float
  badge: Boolean
  bonus_points: Int
  time_spent: String
  achieved_points: Int
  total_points: Int
  start_date: String
}

type LearnerCourse {
  id: String
  name: String
  progress: Float
  engagement: Float
  performance: Float
  certificate_earned: Boolean
  time_spent: String
  achieved_points: Int
  total_points: Int
  total_badges: Int
  certificate_pass_percentage: Float
  start_date: String
  modules: [LearnerModule!]
}

type Pacing {
  ahead: Int
  on_track: Int
  behind: Int
}

type Learners {
  total: Int
  active: Int
  pacing: Pacing
}

type LaggingCourse {
  user: String
  count: Int
}

type CompletedCourse {
  course_id: String
  course_name: String
}

# Types for Program Performance Analytics
type OngoingCourseProgress {
  course_name: String
  course_order_id: Int
  module_order_id: Int
  module_name: String
  first_name: String
  is_badge_earned_module: Boolean
}

# Types for Program Performance Analytics
type ProgrammeUserCertStatus {
  course_order_id: Int
  course_name: String
  first_name: String
  is_certificate_earned_course: Boolean
}

type Program {
  id: String
  name: String
  pm_email: String
  program_manager: String
  status: String
  last_updated: String
  available_platform: String
  total_course_certificates: Int
  duration: Duration
  category: String
  cohort: String
  total_points: Int
  certificate_pass_percentage: Float
  badge_percentage: Float
  distinction_percentage: Float
  allowed_quiz_attempts: Int
  badge_bonus_points: Int
  is_valid: Boolean
  courses: [ProgramCourse!]
  learners: Learners
  is_alive: Int
  is_alive_list: [String]
  access_blocked: Int
  access_blocked_list: [String]
  laggards_count: Int
  lagging_courses_list: [LaggingCourse]
  completed_course_count: Int
  completed_courses_list: [CompletedCourse]
  progress: Float
  engagement: Float
  ongoing_course_progress: [OngoingCourseProgress!]
  programme_user_cert_status_list: [ProgrammeUserCertStatus!]
}

type Certificates {
  completion: Int!
  distinction: Int!
}

type Learner {
  id: String!
  name: String!
  email: String!
  status: String!
  progress: Float!
  engagement: Float!
  performance: Float!
  time_spent: String!
  achieved_points: Int!
  badges: Int!
  total_points: Int!
  certificates: Certificates!
  courses: [LearnerCourse!]!
  course_certificates_earned: Int!
  last_active: String
}

type LearnerProgress {
  id: String!
  name: String!
  status: String!
  completion_certificates: Int!
  distinction_certificates: Int!
  performance: Float!
  total_course_certificates: Int!
  total_badges: Int!
  learner_data: [Learner!]!
}

type Query {
  programs: [Program!]!
  learnerProgress(programme_id: String!): LearnerProgress
}
