type Duration {
  start: String
  end: String
  time_elapsed: Float
  remaining_time: String
}

type Module {
  id: String!
  name: String!
  engagement: Float!
  progress: Float!
  performance: Float!
  badge: Boolean!
  bonus_points: Int!
  time_spent: String!
  achieved_points: Int!
  total_points: Int!
  start_date: String!
}

type Course {
  id: String!
  name: String!
  progress: Float!
  engagement: Float!
  performance: Float!
  certificate_earned: Boolean!
  time_spent: String!
  achieved_points: Int!
  total_points: Int!
  start_date: String!
  modules: [Module!]!
}

type Pacing {
  ahead: Int
  on_track: Int
  behind: Int
}

type Learners {
  total: Int
  active: Int
  pacing: Pacing
}

type LaggingCourse {
  user: String
  count: Int
}

type CompletedCourse {
  course_id: String
  course_name: String
}

type Program {
  id: String
  name: String
  pm_email: String
  program_manager: String
  status: String
  last_updated: String
  available_platform: String
  total_course_certificates: Int
  duration: Duration
  category: String
  cohort: String
  total_points: Int
  certificate_pass_percentage: Float
  badge_percentage: Float
  distinction_percentage: Float
  allowed_quiz_attempts: Int
  badge_bonus_points: Int
  is_valid: Boolean
  courses: [Course]
  learners: Learners
  is_alive: Int
  is_alive_list: [String]
  access_blocked: Int
  access_blocked_list: [String]
  laggards_count: Int
  lagging_courses_list: [LaggingCourse]
  completed_course_count: Int
  completed_courses_list: [CompletedCourse]
  progress: Float
  engagement: Float
}

type Certificates {
    completion: Int!
    distinction: Int!
}

type Learner {
    id: String!
    name: String!
    email: String!
    status: String!
    progress: Float!
    engagement: Float!
    performance: Float!
    time_spent: String!
    achieved_points: Int!
    badges: Int!
    total_points: Int!
    certificates: Certificates!
    courses: [Course!]!
}

type LearnerProgress {
    id: String!
    name: String!
    status: String!
    completion_certificates: Int!
    distinction_certificates: Int!
    performance: Float!
    total_course_certificates: Int!
    learner_data: [Learner!]!
}

type Query {
  programs: [Program!]!
  learnerProgress(programme_id: String!): LearnerProgress
}
